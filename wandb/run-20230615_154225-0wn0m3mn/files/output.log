





























100%|██████████| 50/50 [01:07<00:00,  1.34s/it]
1it [00:00,  1.43it/s]
{'prediction': tensor([ 37.4032, 141.2742,  73.8485, 173.6190], device='cuda:0'), 'true': [tensor([ 53., 115.,  80., 147.])]}

3it [00:02,  1.29it/s]
{'prediction': tensor([ 32.9760, 108.5368,  65.8192, 136.0252], device='cuda:0'), 'true': [tensor([ 55.,  90.,  94., 134.])]}
{'prediction': tensor([ 40.1385, 119.9173,  75.0938, 149.0234], device='cuda:0'), 'true': [tensor([ 65., 102.,  98., 143.])]}

6it [00:04,  1.25it/s]
{'prediction': tensor([ 35.9990, 108.6366,  70.4018, 136.7893], device='cuda:0'), 'true': [tensor([ 60., 108.,  88., 143.])]}
7it [00:04,  1.42it/s]
C:\Users\0005h\OneDrive\Documents\programming\pycharm\Bachelor_thesis\train_bbox.py:115: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  img = torchvision.utils.draw_bounding_boxes(torch.tensor(images[0], dtype=torch.uint8),
C:\Users\0005h\OneDrive\Documents\programming\pycharm\Bachelor_thesis\train_bbox.py:116: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  torch.stack((torch.tensor(outputs, dtype=torch.uint8), torch.tensor(bboxes, dtype=torch.uint8))))