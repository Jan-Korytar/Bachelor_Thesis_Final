

100%|██████████| 5/5 [00:06<00:00,  1.28s/it]
0it [00:00, ?it/s]
{'prediction': tensor([ 2.1818, -0.2967,  2.6277,  0.8877], device='cuda:0'), 'true': [tensor([ 98.,  55., 137.,  89.])]}
{'prediction': tensor([ 2.2663, -0.3073,  2.7298,  0.9195], device='cuda:0'), 'true': [tensor([ 94.,  53., 137.,  92.])]}
{'prediction': tensor([ 2.2039, -0.2994,  2.6510,  0.8917], device='cuda:0'), 'true': [tensor([104.,  45., 145.,  82.])]}

4it [00:01,  2.27it/s]
{'prediction': tensor([ 2.2728, -0.3076,  2.7379,  0.9221], device='cuda:0'), 'true': [tensor([105.,  60., 144.,  90.])]}
{'prediction': tensor([ 2.1070, -0.2894,  2.5350,  0.8583], device='cuda:0'), 'true': [tensor([ 99.,  27., 141.,  63.])]}
{'prediction': tensor([ 2.2293, -0.3024,  2.6823,  0.9020], device='cuda:0'), 'true': [tensor([113.,  52., 149.,  83.])]}
Saving the best model
7it [00:02,  2.42it/s]
C:\Users\0005h\OneDrive\Documents\programming\pycharm\Bachelor_thesis\train_bbox.py:116: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  torch.stack((torch.tensor(outputs[0], dtype=torch.uint8), torch.tensor(bboxes[0], dtype=torch.uint8)))))

100%|██████████| 5/5 [00:04<00:00,  1.12it/s]
0it [00:00, ?it/s]
{'prediction': tensor([10.2929, -4.4707, 10.6270,  1.7993], device='cuda:0'), 'true': [tensor([103.,  58., 140.,  91.])]}

2it [00:01,  1.39it/s]
{'prediction': tensor([10.0954, -4.3702, 10.4282,  1.7723], device='cuda:0'), 'true': [tensor([104.,  35., 143.,  62.])]}

4it [00:03,  1.04s/it]
{'prediction': tensor([10.2059, -4.4247, 10.5404,  1.7824], device='cuda:0'), 'true': [tensor([ 91.,  51., 138.,  91.])]}

7it [00:06,  1.13it/s]
{'prediction': tensor([ 9.4614, -4.0903,  9.7815,  1.6656], device='cuda:0'), 'true': [tensor([102.,  58., 135.,  90.])]}