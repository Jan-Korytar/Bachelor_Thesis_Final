


100%|██████████| 5/5 [00:12<00:00,  2.40s/it]
2it [00:01,  1.58it/s]
{'prediction': tensor([0.2194, 1.0627, 0.5984, 1.3015], device='cuda:0'), 'true': [tensor([ 46.,  99.,  85., 141.], device='cuda:0')]}
{'prediction': tensor([0.2560, 1.3077, 0.7358, 1.6009], device='cuda:0'), 'true': [tensor([ 44.,  97.,  84., 141.], device='cuda:0')]}

5it [00:03,  1.40it/s]
{'prediction': tensor([0.2683, 1.3601, 0.7720, 1.6745], device='cuda:0'), 'true': [tensor([ 53., 100.,  84., 138.], device='cuda:0')]}
{'prediction': tensor([0.2290, 1.1509, 0.6482, 1.4129], device='cuda:0'), 'true': [tensor([ 23.,  98.,  59., 137.], device='cuda:0')]}
7it [00:04,  1.59it/s]
C:\Users\0005h\OneDrive\Documents\programming\pycharm\Bachelor_thesis\train_bbox.py:100: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  torch.stack((torch.tensor(outputs[0], dtype=torch.uint8), torch.tensor(bboxes[0], dtype=torch.uint8)))))
  0%|          | 0/5 [00:00<?, ?it/s]
{'prediction': tensor([0.2062, 0.9958, 0.5674, 1.2276], device='cuda:0'), 'true': [tensor([ 28.,  95.,  62., 138.], device='cuda:0')]}
Saving the best model


100%|██████████| 5/5 [00:05<00:00,  1.14s/it]
1it [00:00,  1.32it/s]

3it [00:02,  1.20it/s]
{'prediction': tensor([-0.0720,  0.9714,  0.3046,  0.8815], device='cuda:0'), 'true': [tensor([ 50., 111.,  78., 146.], device='cuda:0')]}

5it [00:04,  1.14it/s]
{'prediction': tensor([-0.0965,  1.1966,  0.3824,  1.0617], device='cuda:0'), 'true': [tensor([ 56.,  98.,  96., 145.], device='cuda:0')]}
{'prediction': tensor([-0.0976,  1.2200,  0.3911,  1.0723], device='cuda:0'), 'true': [tensor([ 53.,  94.,  92., 137.], device='cuda:0')]}
7it [00:05,  1.32it/s]
 20%|██        | 1/5 [00:01<00:05,  1.31s/it]
{'prediction': tensor([-0.0501,  0.7823,  0.2440,  0.7125], device='cuda:0'), 'true': [tensor([ 31.,  97.,  62., 137.], device='cuda:0')]}


100%|██████████| 5/5 [00:06<00:00,  1.23s/it]
1it [00:00,  1.19it/s]
{'prediction': tensor([-0.3312,  7.5961,  2.2740,  7.7421], device='cuda:0'), 'true': [tensor([ 51., 103.,  79., 140.], device='cuda:0')]}

4it [00:03,  1.21it/s]
{'prediction': tensor([-0.3342,  7.1830,  2.1344,  7.3371], device='cuda:0'), 'true': [tensor([ 30., 110.,  58., 141.], device='cuda:0')]}

7it [00:05,  1.32it/s]
{'prediction': tensor([-0.3599,  8.4381,  2.5020,  8.5234], device='cuda:0'), 'true': [tensor([ 54., 109.,  90., 148.], device='cuda:0')]}
{'prediction': tensor([-0.3521,  7.8230,  2.3087,  7.9570], device='cuda:0'), 'true': [tensor([ 55.,  93.,  90., 132.], device='cuda:0')]}
{'prediction': tensor([-0.2736,  6.1260,  1.7997,  6.2672], device='cuda:0'), 'true': [tensor([ 48., 103.,  80., 141.], device='cuda:0')]}
Saving the best model
Epoch [3/10], Train Loss: 8573.3034, Val Loss: 9083.2069


100%|██████████| 5/5 [00:06<00:00,  1.36s/it]
1it [00:00,  1.26it/s]

2it [00:01,  1.21it/s]
{'prediction': tensor([ 3.2518, 56.4975, 20.7731, 64.3202], device='cuda:0'), 'true': [tensor([ 50., 109.,  80., 143.], device='cuda:0')]}
{'prediction': tensor([ 3.5680, 61.0333, 22.6809, 69.3474], device='cuda:0'), 'true': [tensor([ 26., 110.,  52., 143.], device='cuda:0')]}

5it [00:04,  1.16it/s]
{'prediction': tensor([ 3.0504, 52.2153, 19.2023, 59.4876], device='cuda:0'), 'true': [tensor([ 47., 100.,  72., 137.], device='cuda:0')]}
{'prediction': tensor([ 3.6200, 61.1581, 22.6628, 69.5061], device='cuda:0'), 'true': [tensor([ 48., 104.,  81., 144.], device='cuda:0')]}
{'prediction': tensor([ 3.4722, 59.0459, 21.7541, 67.1122], device='cuda:0'), 'true': [tensor([ 59., 114.,  90., 150.], device='cuda:0')]}
7it [00:05,  1.31it/s]
  0%|          | 0/5 [00:00<?, ?it/s]


100%|██████████| 5/5 [00:06<00:00,  1.25s/it]
0it [00:00, ?it/s]

3it [00:02,  1.19it/s]
{'prediction': tensor([ 43.4337, 124.2469,  82.1234, 168.4843], device='cuda:0'), 'true': [tensor([ 49.,  97.,  83., 139.], device='cuda:0')]}

5it [00:04,  1.21it/s]
{'prediction': tensor([ 40.8647, 115.6916,  76.4616, 156.5453], device='cuda:0'), 'true': [tensor([ 50., 100.,  80., 139.], device='cuda:0')]}
{'prediction': tensor([ 40.9047, 115.8492,  76.2964, 156.6234], device='cuda:0'), 'true': [tensor([ 57., 116.,  86., 151.], device='cuda:0')]}
7it [00:05,  1.34it/s]
  0%|          | 0/5 [00:00<?, ?it/s]
{'prediction': tensor([ 35.3288, 101.0384,  65.8651, 136.8091], device='cuda:0'), 'true': [tensor([ 22., 116.,  55., 154.], device='cuda:0')]}
Saving the best model


100%|██████████| 5/5 [00:06<00:00,  1.24s/it]
0it [00:00, ?it/s]

4it [00:02,  1.52it/s]
{'prediction': tensor([24.2363, 50.3515, 47.3075, 85.3787], device='cuda:0'), 'true': [tensor([ 54.,  99.,  88., 138.], device='cuda:0')]}
{'prediction': tensor([22.2123, 48.3508, 43.0815, 81.3205], device='cuda:0'), 'true': [tensor([ 29., 104.,  61., 147.], device='cuda:0')]}
7it [00:04,  1.53it/s]
  0%|          | 0/5 [00:00<?, ?it/s]
{'prediction': tensor([20.6350, 42.2317, 38.4817, 70.8646], device='cuda:0'), 'true': [tensor([ 27., 114.,  60., 153.], device='cuda:0')]}
{'prediction': tensor([23.5338, 47.8476, 44.3325, 80.2111], device='cuda:0'), 'true': [tensor([ 58., 102.,  93., 144.], device='cuda:0')]}
{'prediction': tensor([24.3400, 48.7943, 45.5053, 81.6271], device='cuda:0'), 'true': [tensor([ 56., 102.,  91., 143.], device='cuda:0')]}


100%|██████████| 5/5 [00:06<00:00,  1.23s/it]

2it [00:01,  1.17it/s]
{'prediction': tensor([ 24.5207,  71.8489,  49.2892, 102.4672], device='cuda:0'), 'true': [tensor([ 52., 118.,  83., 154.], device='cuda:0')]}
{'prediction': tensor([ 26.4883,  78.1965,  54.0448, 112.1077], device='cuda:0'), 'true': [tensor([ 56., 104.,  92., 142.], device='cuda:0')]}

4it [00:03,  1.25it/s]
{'prediction': tensor([ 23.6260,  69.1986,  49.7700, 100.4775], device='cuda:0'), 'true': [tensor([ 66., 103., 104., 149.], device='cuda:0')]}

7it [00:05,  1.36it/s]
{'prediction': tensor([21.1660, 65.1802, 45.4567, 94.5686], device='cuda:0'), 'true': [tensor([ 59.,  98.,  92., 139.], device='cuda:0')]}
{'prediction': tensor([ 23.3442,  70.6724,  47.6540, 100.8469], device='cuda:0'), 'true': [tensor([ 49., 110.,  81., 149.], device='cuda:0')]}